
HumidityMeasurement.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000051c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009a1  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000075e  00000000  00000000  00000f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003bc  00000000  00000000  000016bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00001a78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f6  00000000  00000000  00001ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014a  00000000  00000000  00001ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  78:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <USART_init>:
#include <stdlib.h>



void USART_init() {
	UBRR0H = 0;
  80:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = 0b001100111;
  84:	87 e6       	ldi	r24, 0x67	; 103
  86:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
  8a:	88 e1       	ldi	r24, 0x18	; 24
  8c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);
  90:	8e e0       	ldi	r24, 0x0E	; 14
  92:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  96:	08 95       	ret

00000098 <USART_send>:
}

void USART_send(unsigned int data){
	while(!(UCSR0A & (1<<UDRE0)));
  98:	e0 ec       	ldi	r30, 0xC0	; 192
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	90 81       	ld	r25, Z
  9e:	95 ff       	sbrs	r25, 5
  a0:	fd cf       	rjmp	.-6      	; 0x9c <USART_send+0x4>
	UDR0 = data;
  a2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  a6:	08 95       	ret

000000a8 <main>:
}

int main(void)
{
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
  b0:	c7 54       	subi	r28, 0x47	; 71
  b2:	d1 40       	sbci	r29, 0x01	; 1
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	f8 94       	cli
  b8:	de bf       	out	0x3e, r29	; 62
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[5];
	USART_init();
  be:	0e 94 40 00 	call	0x80	; 0x80 <USART_init>
	DDRD &= ~(1<<PORTD7);
  c2:	57 98       	cbi	0x0a, 7	; 10
	PORTD |= (1<<PORTD7);
  c4:	5f 9a       	sbi	0x0b, 7	; 11
  c6:	7e 01       	movw	r14, r28
  c8:	26 e0       	ldi	r18, 0x06	; 6
  ca:	e2 0e       	add	r14, r18
  cc:	f1 1c       	adc	r15, r1
  ce:	8e 01       	movw	r16, r28
  d0:	0a 5b       	subi	r16, 0xBA	; 186
  d2:	1e 4f       	sbci	r17, 0xFE	; 254
		//WAIT FOR 80us LOW SIGNAL AND THEN HIGH SIGNAL
		USART_send('a');
		while(!(PORTD & (1 << PORTD7)));
		USART_send('n');
		while(PORTD & (1 << PORTD7));
		USART_send('c');
  d4:	ca 5b       	subi	r28, 0xBA	; 186
  d6:	de 4f       	sbci	r29, 0xFE	; 254
  d8:	e8 82       	st	Y, r14
  da:	c6 54       	subi	r28, 0x46	; 70
  dc:	d1 40       	sbci	r29, 0x01	; 1
  de:	c9 5b       	subi	r28, 0xB9	; 185
  e0:	de 4f       	sbci	r29, 0xFE	; 254
  e2:	f8 82       	st	Y, r15
  e4:	c7 54       	subi	r28, 0x47	; 71
  e6:	d1 40       	sbci	r29, 0x01	; 1
		for( int i = 0; i < 80; i+=2 ){
			 uint32_t lowCycles  = cycles[2*i];
			 uint32_t highCycles = cycles[2*i+1];
			 uint32_t  count1, count2;
			 count1 = count2 = 0;
			 while(!(PORTD & (1 << PORTD7))){
  e8:	a1 2c       	mov	r10, r1
  ea:	b1 2c       	mov	r11, r1
  ec:	c1 2c       	mov	r12, r1
  ee:	d1 2c       	mov	r13, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	97 ea       	ldi	r25, 0xA7	; 167
  f4:	21 e6       	ldi	r18, 0x61	; 97
  f6:	81 50       	subi	r24, 0x01	; 1
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	20 40       	sbci	r18, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x4e>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x58>
 100:	00 00       	nop
	DDRD &= ~(1<<PORTD7);
	PORTD |= (1<<PORTD7);
    while (1) 
    {
		_delay_ms(2000);
		data[0] = data[1] = data[2] = data[3] = data[4] = 0;
 102:	1d 82       	std	Y+5, r1	; 0x05
 104:	1c 82       	std	Y+4, r1	; 0x04
 106:	1b 82       	std	Y+3, r1	; 0x03
 108:	1a 82       	std	Y+2, r1	; 0x02
 10a:	19 82       	std	Y+1, r1	; 0x01
		
		//INPUT PULL UP
		DDRD &= ~(1<<PORTD7);
 10c:	57 98       	cbi	0x0a, 7	; 10
		PORTD |= (1<<PORTD7);
 10e:	5f 9a       	sbi	0x0b, 7	; 11
 110:	8f e9       	ldi	r24, 0x9F	; 159
 112:	9f e0       	ldi	r25, 0x0F	; 15
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <main+0x6c>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x72>
 11a:	00 00       	nop
		_delay_ms(1);
		
		//SET LINE AS LOW
		DDRD |= (1<<PORTD7);
 11c:	57 9a       	sbi	0x0a, 7	; 10
		PORTD &= ~(1<<PORTD7);
 11e:	5f 98       	cbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	8f e2       	ldi	r24, 0x2F	; 47
 122:	91 e1       	ldi	r25, 0x11	; 17
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <main+0x7c>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x82>
 12a:	00 00       	nop
		_delay_us(1100);
		
		//END START SIGNAL
		DDRD &= ~(1<<PORTD7);
 12c:	57 98       	cbi	0x0a, 7	; 10
		PORTD |= (1<<PORTD7);
 12e:	5f 9a       	sbi	0x0b, 7	; 11
 130:	8f ee       	ldi	r24, 0xEF	; 239
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <main+0x8c>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0x92>
 13a:	00 00       	nop
		_delay_us(60);
		
		uint32_t cycles[80];
		
		//CRITICAL AREA
		cli();
 13c:	f8 94       	cli
		
		//WAIT FOR 80us LOW SIGNAL AND THEN HIGH SIGNAL
		USART_send('a');
 13e:	81 e6       	ldi	r24, 0x61	; 97
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 4c 00 	call	0x98	; 0x98 <USART_send>
		while(!(PORTD & (1 << PORTD7)));
 146:	5f 9b       	sbis	0x0b, 7	; 11
 148:	fe cf       	rjmp	.-4      	; 0x146 <main+0x9e>
		USART_send('n');
 14a:	8e e6       	ldi	r24, 0x6E	; 110
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 4c 00 	call	0x98	; 0x98 <USART_send>
		while(PORTD & (1 << PORTD7));
 152:	5f 99       	sbic	0x0b, 7	; 11
 154:	fe cf       	rjmp	.-4      	; 0x152 <main+0xaa>
		USART_send('c');
 156:	83 e6       	ldi	r24, 0x63	; 99
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 4c 00 	call	0x98	; 0x98 <USART_send>
 15e:	a7 01       	movw	r20, r14
 160:	ca 5b       	subi	r28, 0xBA	; 186
 162:	de 4f       	sbci	r29, 0xFE	; 254
 164:	e8 81       	ld	r30, Y
 166:	c6 54       	subi	r28, 0x46	; 70
 168:	d1 40       	sbci	r29, 0x01	; 1
 16a:	c9 5b       	subi	r28, 0xB9	; 185
 16c:	de 4f       	sbci	r29, 0xFE	; 254
 16e:	f8 81       	ld	r31, Y
 170:	c7 54       	subi	r28, 0x47	; 71
 172:	d1 40       	sbci	r29, 0x01	; 1
 174:	27 c0       	rjmp	.+78     	; 0x1c4 <main+0x11c>
		for( int i = 0; i < 80; i+=2 ){
			 uint32_t lowCycles  = cycles[2*i];
			 uint32_t highCycles = cycles[2*i+1];
			 uint32_t  count1, count2;
			 count1 = count2 = 0;
			 while(!(PORTD & (1 << PORTD7))){
 176:	8a 2d       	mov	r24, r10
 178:	9b 2d       	mov	r25, r11
 17a:	ac 2d       	mov	r26, r12
 17c:	bd 2d       	mov	r27, r13
				 count1++;
 17e:	01 96       	adiw	r24, 0x01	; 1
 180:	a1 1d       	adc	r26, r1
 182:	b1 1d       	adc	r27, r1
		for( int i = 0; i < 80; i+=2 ){
			 uint32_t lowCycles  = cycles[2*i];
			 uint32_t highCycles = cycles[2*i+1];
			 uint32_t  count1, count2;
			 count1 = count2 = 0;
			 while(!(PORTD & (1 << PORTD7))){
 184:	5f 9b       	sbis	0x0b, 7	; 11
 186:	fb cf       	rjmp	.-10     	; 0x17e <main+0xd6>
				 count1++;
			 }
			 while((PORTD & (1 << PORTD7))){
 188:	5f 9b       	sbis	0x0b, 7	; 11
 18a:	0c c0       	rjmp	.+24     	; 0x1a4 <main+0xfc>
 18c:	4a 2c       	mov	r4, r10
 18e:	5b 2c       	mov	r5, r11
 190:	6c 2c       	mov	r6, r12
 192:	7d 2c       	mov	r7, r13
				 count2++;
 194:	2f ef       	ldi	r18, 0xFF	; 255
 196:	42 1a       	sub	r4, r18
 198:	52 0a       	sbc	r5, r18
 19a:	62 0a       	sbc	r6, r18
 19c:	72 0a       	sbc	r7, r18
			 uint32_t  count1, count2;
			 count1 = count2 = 0;
			 while(!(PORTD & (1 << PORTD7))){
				 count1++;
			 }
			 while((PORTD & (1 << PORTD7))){
 19e:	5f 99       	sbic	0x0b, 7	; 11
 1a0:	f9 cf       	rjmp	.-14     	; 0x194 <main+0xec>
 1a2:	04 c0       	rjmp	.+8      	; 0x1ac <main+0x104>
 1a4:	4a 2c       	mov	r4, r10
 1a6:	5b 2c       	mov	r5, r11
 1a8:	6c 2c       	mov	r6, r12
 1aa:	7d 2c       	mov	r7, r13
				 count2++;
			 }
			 cycles[i] = count1;
 1ac:	80 83       	st	Z, r24
 1ae:	91 83       	std	Z+1, r25	; 0x01
 1b0:	a2 83       	std	Z+2, r26	; 0x02
 1b2:	b3 83       	std	Z+3, r27	; 0x03
			 cycles[i+1] = count2;
 1b4:	44 82       	std	Z+4, r4	; 0x04
 1b6:	55 82       	std	Z+5, r5	; 0x05
 1b8:	66 82       	std	Z+6, r6	; 0x06
 1ba:	77 82       	std	Z+7, r7	; 0x07
 1bc:	38 96       	adiw	r30, 0x08	; 8
		while(!(PORTD & (1 << PORTD7)));
		USART_send('n');
		while(PORTD & (1 << PORTD7));
		USART_send('c');
		
		for( int i = 0; i < 80; i+=2 ){
 1be:	e0 17       	cp	r30, r16
 1c0:	f1 07       	cpc	r31, r17
 1c2:	39 f0       	breq	.+14     	; 0x1d2 <main+0x12a>
			 uint32_t lowCycles  = cycles[2*i];
			 uint32_t highCycles = cycles[2*i+1];
			 uint32_t  count1, count2;
			 count1 = count2 = 0;
			 while(!(PORTD & (1 << PORTD7))){
 1c4:	5f 9b       	sbis	0x0b, 7	; 11
 1c6:	d7 cf       	rjmp	.-82     	; 0x176 <main+0xce>
 1c8:	8a 2d       	mov	r24, r10
 1ca:	9b 2d       	mov	r25, r11
 1cc:	ac 2d       	mov	r26, r12
 1ce:	bd 2d       	mov	r27, r13
 1d0:	db cf       	rjmp	.-74     	; 0x188 <main+0xe0>
			 cycles[i] = count1;
			 cycles[i+1] = count2;
		}
		
		//END OF CRITICAL AREA
		sei();
 1d2:	78 94       	sei
		
		//CONVERT PULSE LENGTH TO VALUE
		for (int i=0; i<40; ++i) {
 1d4:	20 e0       	ldi	r18, 0x00	; 0
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	fa 01       	movw	r30, r20
			uint32_t lowCycles  = cycles[2*i];
			uint32_t highCycles = cycles[2*i+1];
			data[i/8] <<= 1;
 1da:	c9 01       	movw	r24, r18
 1dc:	33 23       	and	r19, r19
 1de:	0c f4       	brge	.+2      	; 0x1e2 <main+0x13a>
 1e0:	07 96       	adiw	r24, 0x07	; 7
 1e2:	95 95       	asr	r25
 1e4:	87 95       	ror	r24
 1e6:	95 95       	asr	r25
 1e8:	87 95       	ror	r24
 1ea:	95 95       	asr	r25
 1ec:	87 95       	ror	r24
 1ee:	a1 e0       	ldi	r26, 0x01	; 1
 1f0:	b0 e0       	ldi	r27, 0x00	; 0
 1f2:	ac 0f       	add	r26, r28
 1f4:	bd 1f       	adc	r27, r29
 1f6:	a8 0f       	add	r26, r24
 1f8:	b9 1f       	adc	r27, r25
 1fa:	6c 91       	ld	r22, X
 1fc:	66 0f       	add	r22, r22
			if (highCycles > lowCycles) {
 1fe:	20 80       	ld	r2, Z
 200:	31 80       	ldd	r3, Z+1	; 0x01
 202:	42 80       	ldd	r4, Z+2	; 0x02
 204:	53 80       	ldd	r5, Z+3	; 0x03
 206:	64 80       	ldd	r6, Z+4	; 0x04
 208:	75 80       	ldd	r7, Z+5	; 0x05
 20a:	86 80       	ldd	r8, Z+6	; 0x06
 20c:	97 80       	ldd	r9, Z+7	; 0x07
 20e:	26 14       	cp	r2, r6
 210:	37 04       	cpc	r3, r7
 212:	48 04       	cpc	r4, r8
 214:	59 04       	cpc	r5, r9
 216:	18 f0       	brcs	.+6      	; 0x21e <main+0x176>
		
		//CONVERT PULSE LENGTH TO VALUE
		for (int i=0; i<40; ++i) {
			uint32_t lowCycles  = cycles[2*i];
			uint32_t highCycles = cycles[2*i+1];
			data[i/8] <<= 1;
 218:	fd 01       	movw	r30, r26
 21a:	60 83       	st	Z, r22
 21c:	08 c0       	rjmp	.+16     	; 0x22e <main+0x186>
			if (highCycles > lowCycles) {
				data[i/8] |= 1;
 21e:	e1 e0       	ldi	r30, 0x01	; 1
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	ec 0f       	add	r30, r28
 224:	fd 1f       	adc	r31, r29
 226:	e8 0f       	add	r30, r24
 228:	f9 1f       	adc	r31, r25
 22a:	61 60       	ori	r22, 0x01	; 1
 22c:	60 83       	st	Z, r22
		
		//END OF CRITICAL AREA
		sei();
		
		//CONVERT PULSE LENGTH TO VALUE
		for (int i=0; i<40; ++i) {
 22e:	2f 5f       	subi	r18, 0xFF	; 255
 230:	3f 4f       	sbci	r19, 0xFF	; 255
 232:	48 5f       	subi	r20, 0xF8	; 248
 234:	5f 4f       	sbci	r21, 0xFF	; 255
 236:	28 32       	cpi	r18, 0x28	; 40
 238:	31 05       	cpc	r19, r1
 23a:	71 f6       	brne	.-100    	; 0x1d8 <main+0x130>
			if (highCycles > lowCycles) {
				data[i/8] |= 1;
			}
		}
		
		float f =((uint16_t)data[0]) << 8 | data[1];
 23c:	69 81       	ldd	r22, Y+1	; 0x01
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	76 2f       	mov	r23, r22
 242:	66 27       	eor	r22, r22
 244:	8a 81       	ldd	r24, Y+2	; 0x02
 246:	68 2b       	or	r22, r24
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 67 01 	call	0x2ce	; 0x2ce <__floatunsisf>
		f *= 0.1;
 250:	2d ec       	ldi	r18, 0xCD	; 205
 252:	3c ec       	ldi	r19, 0xCC	; 204
 254:	4c ec       	ldi	r20, 0xCC	; 204
 256:	5d e3       	ldi	r21, 0x3D	; 61
 258:	0e 94 cd 01 	call	0x39a	; 0x39a <__mulsf3>
		USART_send(f);
 25c:	0e 94 38 01 	call	0x270	; 0x270 <__fixunssfsi>
 260:	cb 01       	movw	r24, r22
 262:	0e 94 4c 00 	call	0x98	; 0x98 <USART_send>
		USART_send('a');
 266:	81 e6       	ldi	r24, 0x61	; 97
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 4c 00 	call	0x98	; 0x98 <USART_send>
    }
 26e:	40 cf       	rjmp	.-384    	; 0xf0 <main+0x48>

00000270 <__fixunssfsi>:
 270:	0e 94 ac 01 	call	0x358	; 0x358 <__fp_splitA>
 274:	88 f0       	brcs	.+34     	; 0x298 <__fixunssfsi+0x28>
 276:	9f 57       	subi	r25, 0x7F	; 127
 278:	98 f0       	brcs	.+38     	; 0x2a0 <__fixunssfsi+0x30>
 27a:	b9 2f       	mov	r27, r25
 27c:	99 27       	eor	r25, r25
 27e:	b7 51       	subi	r27, 0x17	; 23
 280:	b0 f0       	brcs	.+44     	; 0x2ae <__fixunssfsi+0x3e>
 282:	e1 f0       	breq	.+56     	; 0x2bc <__fixunssfsi+0x4c>
 284:	66 0f       	add	r22, r22
 286:	77 1f       	adc	r23, r23
 288:	88 1f       	adc	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	1a f0       	brmi	.+6      	; 0x294 <__fixunssfsi+0x24>
 28e:	ba 95       	dec	r27
 290:	c9 f7       	brne	.-14     	; 0x284 <__fixunssfsi+0x14>
 292:	14 c0       	rjmp	.+40     	; 0x2bc <__fixunssfsi+0x4c>
 294:	b1 30       	cpi	r27, 0x01	; 1
 296:	91 f0       	breq	.+36     	; 0x2bc <__fixunssfsi+0x4c>
 298:	0e 94 c6 01 	call	0x38c	; 0x38c <__fp_zero>
 29c:	b1 e0       	ldi	r27, 0x01	; 1
 29e:	08 95       	ret
 2a0:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__fp_zero>
 2a4:	67 2f       	mov	r22, r23
 2a6:	78 2f       	mov	r23, r24
 2a8:	88 27       	eor	r24, r24
 2aa:	b8 5f       	subi	r27, 0xF8	; 248
 2ac:	39 f0       	breq	.+14     	; 0x2bc <__fixunssfsi+0x4c>
 2ae:	b9 3f       	cpi	r27, 0xF9	; 249
 2b0:	cc f3       	brlt	.-14     	; 0x2a4 <__fixunssfsi+0x34>
 2b2:	86 95       	lsr	r24
 2b4:	77 95       	ror	r23
 2b6:	67 95       	ror	r22
 2b8:	b3 95       	inc	r27
 2ba:	d9 f7       	brne	.-10     	; 0x2b2 <__fixunssfsi+0x42>
 2bc:	3e f4       	brtc	.+14     	; 0x2cc <__fixunssfsi+0x5c>
 2be:	90 95       	com	r25
 2c0:	80 95       	com	r24
 2c2:	70 95       	com	r23
 2c4:	61 95       	neg	r22
 2c6:	7f 4f       	sbci	r23, 0xFF	; 255
 2c8:	8f 4f       	sbci	r24, 0xFF	; 255
 2ca:	9f 4f       	sbci	r25, 0xFF	; 255
 2cc:	08 95       	ret

000002ce <__floatunsisf>:
 2ce:	e8 94       	clt
 2d0:	09 c0       	rjmp	.+18     	; 0x2e4 <__floatsisf+0x12>

000002d2 <__floatsisf>:
 2d2:	97 fb       	bst	r25, 7
 2d4:	3e f4       	brtc	.+14     	; 0x2e4 <__floatsisf+0x12>
 2d6:	90 95       	com	r25
 2d8:	80 95       	com	r24
 2da:	70 95       	com	r23
 2dc:	61 95       	neg	r22
 2de:	7f 4f       	sbci	r23, 0xFF	; 255
 2e0:	8f 4f       	sbci	r24, 0xFF	; 255
 2e2:	9f 4f       	sbci	r25, 0xFF	; 255
 2e4:	99 23       	and	r25, r25
 2e6:	a9 f0       	breq	.+42     	; 0x312 <__floatsisf+0x40>
 2e8:	f9 2f       	mov	r31, r25
 2ea:	96 e9       	ldi	r25, 0x96	; 150
 2ec:	bb 27       	eor	r27, r27
 2ee:	93 95       	inc	r25
 2f0:	f6 95       	lsr	r31
 2f2:	87 95       	ror	r24
 2f4:	77 95       	ror	r23
 2f6:	67 95       	ror	r22
 2f8:	b7 95       	ror	r27
 2fa:	f1 11       	cpse	r31, r1
 2fc:	f8 cf       	rjmp	.-16     	; 0x2ee <__floatsisf+0x1c>
 2fe:	fa f4       	brpl	.+62     	; 0x33e <__floatsisf+0x6c>
 300:	bb 0f       	add	r27, r27
 302:	11 f4       	brne	.+4      	; 0x308 <__floatsisf+0x36>
 304:	60 ff       	sbrs	r22, 0
 306:	1b c0       	rjmp	.+54     	; 0x33e <__floatsisf+0x6c>
 308:	6f 5f       	subi	r22, 0xFF	; 255
 30a:	7f 4f       	sbci	r23, 0xFF	; 255
 30c:	8f 4f       	sbci	r24, 0xFF	; 255
 30e:	9f 4f       	sbci	r25, 0xFF	; 255
 310:	16 c0       	rjmp	.+44     	; 0x33e <__floatsisf+0x6c>
 312:	88 23       	and	r24, r24
 314:	11 f0       	breq	.+4      	; 0x31a <__floatsisf+0x48>
 316:	96 e9       	ldi	r25, 0x96	; 150
 318:	11 c0       	rjmp	.+34     	; 0x33c <__floatsisf+0x6a>
 31a:	77 23       	and	r23, r23
 31c:	21 f0       	breq	.+8      	; 0x326 <__floatsisf+0x54>
 31e:	9e e8       	ldi	r25, 0x8E	; 142
 320:	87 2f       	mov	r24, r23
 322:	76 2f       	mov	r23, r22
 324:	05 c0       	rjmp	.+10     	; 0x330 <__floatsisf+0x5e>
 326:	66 23       	and	r22, r22
 328:	71 f0       	breq	.+28     	; 0x346 <__floatsisf+0x74>
 32a:	96 e8       	ldi	r25, 0x86	; 134
 32c:	86 2f       	mov	r24, r22
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	2a f0       	brmi	.+10     	; 0x33e <__floatsisf+0x6c>
 334:	9a 95       	dec	r25
 336:	66 0f       	add	r22, r22
 338:	77 1f       	adc	r23, r23
 33a:	88 1f       	adc	r24, r24
 33c:	da f7       	brpl	.-10     	; 0x334 <__floatsisf+0x62>
 33e:	88 0f       	add	r24, r24
 340:	96 95       	lsr	r25
 342:	87 95       	ror	r24
 344:	97 f9       	bld	r25, 7
 346:	08 95       	ret

00000348 <__fp_split3>:
 348:	57 fd       	sbrc	r21, 7
 34a:	90 58       	subi	r25, 0x80	; 128
 34c:	44 0f       	add	r20, r20
 34e:	55 1f       	adc	r21, r21
 350:	59 f0       	breq	.+22     	; 0x368 <__fp_splitA+0x10>
 352:	5f 3f       	cpi	r21, 0xFF	; 255
 354:	71 f0       	breq	.+28     	; 0x372 <__fp_splitA+0x1a>
 356:	47 95       	ror	r20

00000358 <__fp_splitA>:
 358:	88 0f       	add	r24, r24
 35a:	97 fb       	bst	r25, 7
 35c:	99 1f       	adc	r25, r25
 35e:	61 f0       	breq	.+24     	; 0x378 <__fp_splitA+0x20>
 360:	9f 3f       	cpi	r25, 0xFF	; 255
 362:	79 f0       	breq	.+30     	; 0x382 <__fp_splitA+0x2a>
 364:	87 95       	ror	r24
 366:	08 95       	ret
 368:	12 16       	cp	r1, r18
 36a:	13 06       	cpc	r1, r19
 36c:	14 06       	cpc	r1, r20
 36e:	55 1f       	adc	r21, r21
 370:	f2 cf       	rjmp	.-28     	; 0x356 <__fp_split3+0xe>
 372:	46 95       	lsr	r20
 374:	f1 df       	rcall	.-30     	; 0x358 <__fp_splitA>
 376:	08 c0       	rjmp	.+16     	; 0x388 <__fp_splitA+0x30>
 378:	16 16       	cp	r1, r22
 37a:	17 06       	cpc	r1, r23
 37c:	18 06       	cpc	r1, r24
 37e:	99 1f       	adc	r25, r25
 380:	f1 cf       	rjmp	.-30     	; 0x364 <__fp_splitA+0xc>
 382:	86 95       	lsr	r24
 384:	71 05       	cpc	r23, r1
 386:	61 05       	cpc	r22, r1
 388:	08 94       	sec
 38a:	08 95       	ret

0000038c <__fp_zero>:
 38c:	e8 94       	clt

0000038e <__fp_szero>:
 38e:	bb 27       	eor	r27, r27
 390:	66 27       	eor	r22, r22
 392:	77 27       	eor	r23, r23
 394:	cb 01       	movw	r24, r22
 396:	97 f9       	bld	r25, 7
 398:	08 95       	ret

0000039a <__mulsf3>:
 39a:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <__mulsf3x>
 39e:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__fp_round>
 3a2:	0e 94 43 02 	call	0x486	; 0x486 <__fp_pscA>
 3a6:	38 f0       	brcs	.+14     	; 0x3b6 <__mulsf3+0x1c>
 3a8:	0e 94 4a 02 	call	0x494	; 0x494 <__fp_pscB>
 3ac:	20 f0       	brcs	.+8      	; 0x3b6 <__mulsf3+0x1c>
 3ae:	95 23       	and	r25, r21
 3b0:	11 f0       	breq	.+4      	; 0x3b6 <__mulsf3+0x1c>
 3b2:	0c 94 3a 02 	jmp	0x474	; 0x474 <__fp_inf>
 3b6:	0c 94 40 02 	jmp	0x480	; 0x480 <__fp_nan>
 3ba:	11 24       	eor	r1, r1
 3bc:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__fp_szero>

000003c0 <__mulsf3x>:
 3c0:	0e 94 a4 01 	call	0x348	; 0x348 <__fp_split3>
 3c4:	70 f3       	brcs	.-36     	; 0x3a2 <__mulsf3+0x8>

000003c6 <__mulsf3_pse>:
 3c6:	95 9f       	mul	r25, r21
 3c8:	c1 f3       	breq	.-16     	; 0x3ba <__mulsf3+0x20>
 3ca:	95 0f       	add	r25, r21
 3cc:	50 e0       	ldi	r21, 0x00	; 0
 3ce:	55 1f       	adc	r21, r21
 3d0:	62 9f       	mul	r22, r18
 3d2:	f0 01       	movw	r30, r0
 3d4:	72 9f       	mul	r23, r18
 3d6:	bb 27       	eor	r27, r27
 3d8:	f0 0d       	add	r31, r0
 3da:	b1 1d       	adc	r27, r1
 3dc:	63 9f       	mul	r22, r19
 3de:	aa 27       	eor	r26, r26
 3e0:	f0 0d       	add	r31, r0
 3e2:	b1 1d       	adc	r27, r1
 3e4:	aa 1f       	adc	r26, r26
 3e6:	64 9f       	mul	r22, r20
 3e8:	66 27       	eor	r22, r22
 3ea:	b0 0d       	add	r27, r0
 3ec:	a1 1d       	adc	r26, r1
 3ee:	66 1f       	adc	r22, r22
 3f0:	82 9f       	mul	r24, r18
 3f2:	22 27       	eor	r18, r18
 3f4:	b0 0d       	add	r27, r0
 3f6:	a1 1d       	adc	r26, r1
 3f8:	62 1f       	adc	r22, r18
 3fa:	73 9f       	mul	r23, r19
 3fc:	b0 0d       	add	r27, r0
 3fe:	a1 1d       	adc	r26, r1
 400:	62 1f       	adc	r22, r18
 402:	83 9f       	mul	r24, r19
 404:	a0 0d       	add	r26, r0
 406:	61 1d       	adc	r22, r1
 408:	22 1f       	adc	r18, r18
 40a:	74 9f       	mul	r23, r20
 40c:	33 27       	eor	r19, r19
 40e:	a0 0d       	add	r26, r0
 410:	61 1d       	adc	r22, r1
 412:	23 1f       	adc	r18, r19
 414:	84 9f       	mul	r24, r20
 416:	60 0d       	add	r22, r0
 418:	21 1d       	adc	r18, r1
 41a:	82 2f       	mov	r24, r18
 41c:	76 2f       	mov	r23, r22
 41e:	6a 2f       	mov	r22, r26
 420:	11 24       	eor	r1, r1
 422:	9f 57       	subi	r25, 0x7F	; 127
 424:	50 40       	sbci	r21, 0x00	; 0
 426:	9a f0       	brmi	.+38     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 428:	f1 f0       	breq	.+60     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 42a:	88 23       	and	r24, r24
 42c:	4a f0       	brmi	.+18     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 42e:	ee 0f       	add	r30, r30
 430:	ff 1f       	adc	r31, r31
 432:	bb 1f       	adc	r27, r27
 434:	66 1f       	adc	r22, r22
 436:	77 1f       	adc	r23, r23
 438:	88 1f       	adc	r24, r24
 43a:	91 50       	subi	r25, 0x01	; 1
 43c:	50 40       	sbci	r21, 0x00	; 0
 43e:	a9 f7       	brne	.-22     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 440:	9e 3f       	cpi	r25, 0xFE	; 254
 442:	51 05       	cpc	r21, r1
 444:	80 f0       	brcs	.+32     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 446:	0c 94 3a 02 	jmp	0x474	; 0x474 <__fp_inf>
 44a:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__fp_szero>
 44e:	5f 3f       	cpi	r21, 0xFF	; 255
 450:	e4 f3       	brlt	.-8      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 452:	98 3e       	cpi	r25, 0xE8	; 232
 454:	d4 f3       	brlt	.-12     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 456:	86 95       	lsr	r24
 458:	77 95       	ror	r23
 45a:	67 95       	ror	r22
 45c:	b7 95       	ror	r27
 45e:	f7 95       	ror	r31
 460:	e7 95       	ror	r30
 462:	9f 5f       	subi	r25, 0xFF	; 255
 464:	c1 f7       	brne	.-16     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 466:	fe 2b       	or	r31, r30
 468:	88 0f       	add	r24, r24
 46a:	91 1d       	adc	r25, r1
 46c:	96 95       	lsr	r25
 46e:	87 95       	ror	r24
 470:	97 f9       	bld	r25, 7
 472:	08 95       	ret

00000474 <__fp_inf>:
 474:	97 f9       	bld	r25, 7
 476:	9f 67       	ori	r25, 0x7F	; 127
 478:	80 e8       	ldi	r24, 0x80	; 128
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	60 e0       	ldi	r22, 0x00	; 0
 47e:	08 95       	ret

00000480 <__fp_nan>:
 480:	9f ef       	ldi	r25, 0xFF	; 255
 482:	80 ec       	ldi	r24, 0xC0	; 192
 484:	08 95       	ret

00000486 <__fp_pscA>:
 486:	00 24       	eor	r0, r0
 488:	0a 94       	dec	r0
 48a:	16 16       	cp	r1, r22
 48c:	17 06       	cpc	r1, r23
 48e:	18 06       	cpc	r1, r24
 490:	09 06       	cpc	r0, r25
 492:	08 95       	ret

00000494 <__fp_pscB>:
 494:	00 24       	eor	r0, r0
 496:	0a 94       	dec	r0
 498:	12 16       	cp	r1, r18
 49a:	13 06       	cpc	r1, r19
 49c:	14 06       	cpc	r1, r20
 49e:	05 06       	cpc	r0, r21
 4a0:	08 95       	ret

000004a2 <__fp_round>:
 4a2:	09 2e       	mov	r0, r25
 4a4:	03 94       	inc	r0
 4a6:	00 0c       	add	r0, r0
 4a8:	11 f4       	brne	.+4      	; 0x4ae <__fp_round+0xc>
 4aa:	88 23       	and	r24, r24
 4ac:	52 f0       	brmi	.+20     	; 0x4c2 <__fp_round+0x20>
 4ae:	bb 0f       	add	r27, r27
 4b0:	40 f4       	brcc	.+16     	; 0x4c2 <__fp_round+0x20>
 4b2:	bf 2b       	or	r27, r31
 4b4:	11 f4       	brne	.+4      	; 0x4ba <__fp_round+0x18>
 4b6:	60 ff       	sbrs	r22, 0
 4b8:	04 c0       	rjmp	.+8      	; 0x4c2 <__fp_round+0x20>
 4ba:	6f 5f       	subi	r22, 0xFF	; 255
 4bc:	7f 4f       	sbci	r23, 0xFF	; 255
 4be:	8f 4f       	sbci	r24, 0xFF	; 255
 4c0:	9f 4f       	sbci	r25, 0xFF	; 255
 4c2:	08 95       	ret

000004c4 <_exit>:
 4c4:	f8 94       	cli

000004c6 <__stop_program>:
 4c6:	ff cf       	rjmp	.-2      	; 0x4c6 <__stop_program>
