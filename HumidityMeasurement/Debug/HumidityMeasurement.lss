
HumidityMeasurement.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b43  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000801  00000000  00000000  00000ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000048a  00000000  00000000  000017f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  00001c84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000440  00000000  00000000  00001d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000260  00000000  00000000  00002198  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000023f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 83 01 	call	0x306	; 0x306 <main>
  78:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <USART_init>:
#include <stdlib.h>

#define PIN 7

void USART_init() {
  UBRR0H = 0;
  80:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  UBRR0L = 0b001100111;
  84:	87 e6       	ldi	r24, 0x67	; 103
  86:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  UCSR0B = (1<<RXEN0) | (1<<TXEN0);
  8a:	88 e1       	ldi	r24, 0x18	; 24
  8c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  UCSR0C = (1<<USBS0) | (3<<UCSZ00);
  90:	8e e0       	ldi	r24, 0x0E	; 14
  92:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  96:	08 95       	ret

00000098 <USART_send>:
}

void USART_send(unsigned int data){
  while(!(UCSR0A & (1<<UDRE0)));
  98:	e0 ec       	ldi	r30, 0xC0	; 192
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	90 81       	ld	r25, Z
  9e:	95 ff       	sbrs	r25, 5
  a0:	fd cf       	rjmp	.-6      	; 0x9c <USART_send+0x4>
  UDR0 = data;
  a2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  a6:	08 95       	ret

000000a8 <USART_receive>:
}

unsigned char USART_receive() {
	while(!(UCSR0A & (1<<RXC0)));
  a8:	e0 ec       	ldi	r30, 0xC0	; 192
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	88 23       	and	r24, r24
  b0:	ec f7       	brge	.-6      	; 0xac <USART_receive+0x4>
	return UDR0;
  b2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  b6:	08 95       	ret

000000b8 <readDHT>:


void readDHT(){
  b8:	6f 92       	push	r6
  ba:	7f 92       	push	r7
  bc:	8f 92       	push	r8
  be:	9f 92       	push	r9
  c0:	af 92       	push	r10
  c2:	bf 92       	push	r11
  c4:	cf 92       	push	r12
  c6:	df 92       	push	r13
  c8:	ef 92       	push	r14
  ca:	ff 92       	push	r15
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
  d8:	cf 54       	subi	r28, 0x4F	; 79
  da:	d1 40       	sbci	r29, 0x01	; 1
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	f8 94       	cli
  e0:	de bf       	out	0x3e, r29	; 62
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[5];
	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
  e6:	1d 82       	std	Y+5, r1	; 0x05
  e8:	1c 82       	std	Y+4, r1	; 0x04
  ea:	1b 82       	std	Y+3, r1	; 0x03
  ec:	1a 82       	std	Y+2, r1	; 0x02
  ee:	19 82       	std	Y+1, r1	; 0x01

	//INPUT PULL UP
	DDRD &= ~(1<<PIN);
  f0:	57 98       	cbi	0x0a, 7	; 10
	PORTD |= (1<<PIN);
  f2:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	8f e9       	ldi	r24, 0x9F	; 159
  f6:	9f e0       	ldi	r25, 0x0F	; 15
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <readDHT+0x40>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <readDHT+0x46>
  fe:	00 00       	nop
	_delay_ms(1);

	//SET LINE AS LOW
	DDRD |= (1<<PIN);
 100:	57 9a       	sbi	0x0a, 7	; 10
	PORTD &= ~(1<<PIN);
 102:	5f 98       	cbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	ef e2       	ldi	r30, 0x2F	; 47
 106:	f1 e1       	ldi	r31, 0x11	; 17
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <readDHT+0x50>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <readDHT+0x56>
 10e:	00 00       	nop
	_delay_us(1100);

	uint32_t cycles[80];

	//CRITICAL AREA
	cli();
 110:	f8 94       	cli
	DDRD &= ~(1<<PIN);
 112:	57 98       	cbi	0x0a, 7	; 10
	PORTD |= (1<<PIN);
 114:	5f 9a       	sbi	0x0b, 7	; 11
 116:	f5 ed       	ldi	r31, 0xD5	; 213
 118:	fa 95       	dec	r31
 11a:	f1 f7       	brne	.-4      	; 0x118 <readDHT+0x60>
 11c:	00 00       	nop
	_delay_us(40);

	//WAIT FOR 80us LOW SIGNAL AND THEN HIGH SIGNAL
	while((PIND & (1 << PIN)) == 0x00);
 11e:	4f 9b       	sbis	0x09, 7	; 9
 120:	fe cf       	rjmp	.-4      	; 0x11e <readDHT+0x66>
	while((PIND & (1 << PIN)) == (1 << PIN));
 122:	4f 99       	sbic	0x09, 7	; 9
 124:	fe cf       	rjmp	.-4      	; 0x122 <readDHT+0x6a>
 126:	3e 01       	movw	r6, r28
 128:	86 e0       	ldi	r24, 0x06	; 6
 12a:	68 0e       	add	r6, r24
 12c:	71 1c       	adc	r7, r1
 12e:	7e 01       	movw	r14, r28
 130:	9a eb       	ldi	r25, 0xBA	; 186
 132:	e9 1a       	sub	r14, r25
 134:	9e ef       	ldi	r25, 0xFE	; 254
 136:	f9 0a       	sbc	r15, r25
 138:	93 01       	movw	r18, r6
	for( int i = 0; i < 80; i+=2 ){
		uint32_t lowCycles  = cycles[2*i];
		uint32_t highCycles = cycles[2*i+1];
		uint32_t  count1, count2;
		count1 = count2 = 0;
		while((PIND & (1 << PIN)) == 0x00){
 13a:	c1 2c       	mov	r12, r1
 13c:	d1 2c       	mov	r13, r1
 13e:	00 e0       	ldi	r16, 0x00	; 0
 140:	10 e0       	ldi	r17, 0x00	; 0
 142:	28 c0       	rjmp	.+80     	; 0x194 <readDHT+0xdc>
 144:	8c 2d       	mov	r24, r12
 146:	9d 2d       	mov	r25, r13
 148:	a0 2f       	mov	r26, r16
 14a:	b1 2f       	mov	r27, r17
			count1++;
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	a1 1d       	adc	r26, r1
 150:	b1 1d       	adc	r27, r1
	for( int i = 0; i < 80; i+=2 ){
		uint32_t lowCycles  = cycles[2*i];
		uint32_t highCycles = cycles[2*i+1];
		uint32_t  count1, count2;
		count1 = count2 = 0;
		while((PIND & (1 << PIN)) == 0x00){
 152:	4f 9b       	sbis	0x09, 7	; 9
 154:	fb cf       	rjmp	.-10     	; 0x14c <readDHT+0x94>
			count1++;
		}
		while((PIND & (1 << PIN)) != 0x00){
 156:	4f 9b       	sbis	0x09, 7	; 9
 158:	0b c0       	rjmp	.+22     	; 0x170 <readDHT+0xb8>
 15a:	4c 2d       	mov	r20, r12
 15c:	5d 2d       	mov	r21, r13
 15e:	60 2f       	mov	r22, r16
 160:	71 2f       	mov	r23, r17
			count2++;
 162:	4f 5f       	subi	r20, 0xFF	; 255
 164:	5f 4f       	sbci	r21, 0xFF	; 255
 166:	6f 4f       	sbci	r22, 0xFF	; 255
 168:	7f 4f       	sbci	r23, 0xFF	; 255
		uint32_t  count1, count2;
		count1 = count2 = 0;
		while((PIND & (1 << PIN)) == 0x00){
			count1++;
		}
		while((PIND & (1 << PIN)) != 0x00){
 16a:	4f 99       	sbic	0x09, 7	; 9
 16c:	fa cf       	rjmp	.-12     	; 0x162 <readDHT+0xaa>
 16e:	04 c0       	rjmp	.+8      	; 0x178 <readDHT+0xc0>
 170:	4c 2d       	mov	r20, r12
 172:	5d 2d       	mov	r21, r13
 174:	60 2f       	mov	r22, r16
 176:	71 2f       	mov	r23, r17
			count2++;
		}
		cycles[i] = count1;
 178:	f9 01       	movw	r30, r18
 17a:	80 83       	st	Z, r24
 17c:	91 83       	std	Z+1, r25	; 0x01
 17e:	a2 83       	std	Z+2, r26	; 0x02
 180:	b3 83       	std	Z+3, r27	; 0x03
		cycles[i+1] = count2;
 182:	44 83       	std	Z+4, r20	; 0x04
 184:	55 83       	std	Z+5, r21	; 0x05
 186:	66 83       	std	Z+6, r22	; 0x06
 188:	77 83       	std	Z+7, r23	; 0x07
 18a:	28 5f       	subi	r18, 0xF8	; 248
 18c:	3f 4f       	sbci	r19, 0xFF	; 255

	//WAIT FOR 80us LOW SIGNAL AND THEN HIGH SIGNAL
	while((PIND & (1 << PIN)) == 0x00);
	while((PIND & (1 << PIN)) == (1 << PIN));

	for( int i = 0; i < 80; i+=2 ){
 18e:	2e 15       	cp	r18, r14
 190:	3f 05       	cpc	r19, r15
 192:	39 f0       	breq	.+14     	; 0x1a2 <readDHT+0xea>
		uint32_t lowCycles  = cycles[2*i];
		uint32_t highCycles = cycles[2*i+1];
		uint32_t  count1, count2;
		count1 = count2 = 0;
		while((PIND & (1 << PIN)) == 0x00){
 194:	4f 9b       	sbis	0x09, 7	; 9
 196:	d6 cf       	rjmp	.-84     	; 0x144 <readDHT+0x8c>
 198:	8c 2d       	mov	r24, r12
 19a:	9d 2d       	mov	r25, r13
 19c:	a0 2f       	mov	r26, r16
 19e:	b1 2f       	mov	r27, r17
 1a0:	da cf       	rjmp	.-76     	; 0x156 <readDHT+0x9e>
		cycles[i] = count1;
		cycles[i+1] = count2;
	}

	//END OF CRITICAL AREA
	sei();
 1a2:	78 94       	sei

	//CONVERT PULSE LENGTH TO VALUE
	for (int i=0; i<40; ++i) {
 1a4:	40 e0       	ldi	r20, 0x00	; 0
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	d3 01       	movw	r26, r6
		uint32_t lowCycles  = cycles[2*i];
		uint32_t highCycles = cycles[2*i+1];
		data[i/8] <<= 1;
 1aa:	ca 01       	movw	r24, r20
 1ac:	55 23       	and	r21, r21
 1ae:	0c f4       	brge	.+2      	; 0x1b2 <readDHT+0xfa>
 1b0:	07 96       	adiw	r24, 0x07	; 7
 1b2:	95 95       	asr	r25
 1b4:	87 95       	ror	r24
 1b6:	95 95       	asr	r25
 1b8:	87 95       	ror	r24
 1ba:	95 95       	asr	r25
 1bc:	87 95       	ror	r24
 1be:	21 e0       	ldi	r18, 0x01	; 1
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	2c 0f       	add	r18, r28
 1c4:	3d 1f       	adc	r19, r29
 1c6:	28 0f       	add	r18, r24
 1c8:	39 1f       	adc	r19, r25
 1ca:	f9 01       	movw	r30, r18
 1cc:	20 81       	ld	r18, Z
 1ce:	22 0f       	add	r18, r18
		if (highCycles > lowCycles) {
 1d0:	8d 90       	ld	r8, X+
 1d2:	9d 90       	ld	r9, X+
 1d4:	ad 90       	ld	r10, X+
 1d6:	bc 90       	ld	r11, X
 1d8:	13 97       	sbiw	r26, 0x03	; 3
 1da:	14 96       	adiw	r26, 0x04	; 4
 1dc:	cd 90       	ld	r12, X+
 1de:	dd 90       	ld	r13, X+
 1e0:	ed 90       	ld	r14, X+
 1e2:	fc 90       	ld	r15, X
 1e4:	17 97       	sbiw	r26, 0x07	; 7
 1e6:	8c 14       	cp	r8, r12
 1e8:	9d 04       	cpc	r9, r13
 1ea:	ae 04       	cpc	r10, r14
 1ec:	bf 04       	cpc	r11, r15
 1ee:	10 f0       	brcs	.+4      	; 0x1f4 <readDHT+0x13c>

	//CONVERT PULSE LENGTH TO VALUE
	for (int i=0; i<40; ++i) {
		uint32_t lowCycles  = cycles[2*i];
		uint32_t highCycles = cycles[2*i+1];
		data[i/8] <<= 1;
 1f0:	20 83       	st	Z, r18
 1f2:	08 c0       	rjmp	.+16     	; 0x204 <readDHT+0x14c>
		if (highCycles > lowCycles) {
			data[i/8] |= 1;
 1f4:	a1 e0       	ldi	r26, 0x01	; 1
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	ac 0f       	add	r26, r28
 1fa:	bd 1f       	adc	r27, r29
 1fc:	a8 0f       	add	r26, r24
 1fe:	b9 1f       	adc	r27, r25
 200:	21 60       	ori	r18, 0x01	; 1
 202:	2c 93       	st	X, r18

	//END OF CRITICAL AREA
	sei();

	//CONVERT PULSE LENGTH TO VALUE
	for (int i=0; i<40; ++i) {
 204:	4f 5f       	subi	r20, 0xFF	; 255
 206:	5f 4f       	sbci	r21, 0xFF	; 255
 208:	f8 e0       	ldi	r31, 0x08	; 8
 20a:	6f 0e       	add	r6, r31
 20c:	71 1c       	adc	r7, r1
 20e:	48 32       	cpi	r20, 0x28	; 40
 210:	51 05       	cpc	r21, r1
 212:	51 f6       	brne	.-108    	; 0x1a8 <readDHT+0xf0>
			data[i/8] |= 1;
		}
	}
	
	char dataChar[10];
	itoa(((uint16_t)data[0] << 8|data[1]), dataChar, 10);
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	98 2f       	mov	r25, r24
 21a:	88 27       	eor	r24, r24
 21c:	2a 81       	ldd	r18, Y+2	; 0x02
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 21e:	4a e0       	ldi	r20, 0x0A	; 10
 220:	be 01       	movw	r22, r28
 222:	6a 5b       	subi	r22, 0xBA	; 186
 224:	7e 4f       	sbci	r23, 0xFE	; 254
 226:	82 2b       	or	r24, r18
 228:	0e 94 9c 01 	call	0x338	; 0x338 <__itoa_ncheck>
	USART_send(dataChar[0]);
 22c:	ca 5b       	subi	r28, 0xBA	; 186
 22e:	de 4f       	sbci	r29, 0xFE	; 254
 230:	88 81       	ld	r24, Y
 232:	c6 54       	subi	r28, 0x46	; 70
 234:	d1 40       	sbci	r29, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 4c 00 	call	0x98	; 0x98 <USART_send>
	USART_send(dataChar[1]);
 23c:	c9 5b       	subi	r28, 0xB9	; 185
 23e:	de 4f       	sbci	r29, 0xFE	; 254
 240:	88 81       	ld	r24, Y
 242:	c7 54       	subi	r28, 0x47	; 71
 244:	d1 40       	sbci	r29, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 4c 00 	call	0x98	; 0x98 <USART_send>
	USART_send(dataChar[2]);
 24c:	c8 5b       	subi	r28, 0xB8	; 184
 24e:	de 4f       	sbci	r29, 0xFE	; 254
 250:	88 81       	ld	r24, Y
 252:	c8 54       	subi	r28, 0x48	; 72
 254:	d1 40       	sbci	r29, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 4c 00 	call	0x98	; 0x98 <USART_send>
	USART_send(dataChar[3]);
 25c:	c7 5b       	subi	r28, 0xB7	; 183
 25e:	de 4f       	sbci	r29, 0xFE	; 254
 260:	88 81       	ld	r24, Y
 262:	c9 54       	subi	r28, 0x49	; 73
 264:	d1 40       	sbci	r29, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 4c 00 	call	0x98	; 0x98 <USART_send>
}
 26c:	c1 5b       	subi	r28, 0xB1	; 177
 26e:	de 4f       	sbci	r29, 0xFE	; 254
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	f8 94       	cli
 274:	de bf       	out	0x3e, r29	; 62
 276:	0f be       	out	0x3f, r0	; 63
 278:	cd bf       	out	0x3d, r28	; 61
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	1f 91       	pop	r17
 280:	0f 91       	pop	r16
 282:	ff 90       	pop	r15
 284:	ef 90       	pop	r14
 286:	df 90       	pop	r13
 288:	cf 90       	pop	r12
 28a:	bf 90       	pop	r11
 28c:	af 90       	pop	r10
 28e:	9f 90       	pop	r9
 290:	8f 90       	pop	r8
 292:	7f 90       	pop	r7
 294:	6f 90       	pop	r6
 296:	08 95       	ret

00000298 <readYL>:

void readYL(){
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	cd b7       	in	r28, 0x3d	; 61
 29e:	de b7       	in	r29, 0x3e	; 62
 2a0:	2a 97       	sbiw	r28, 0x0a	; 10
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	f8 94       	cli
 2a6:	de bf       	out	0x3e, r29	; 62
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	cd bf       	out	0x3d, r28	; 61
	uint8_t data[2];
	
	//START CONVERTION
	ADCSRA |= (1<<ADSC);
 2ac:	ea e7       	ldi	r30, 0x7A	; 122
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	80 64       	ori	r24, 0x40	; 64
 2b4:	80 83       	st	Z, r24

	while ((ADCSRA & (1<<ADSC)) != 0 );
 2b6:	80 81       	ld	r24, Z
 2b8:	86 fd       	sbrc	r24, 6
 2ba:	fd cf       	rjmp	.-6      	; 0x2b6 <readYL+0x1e>

	data[1] = ADCL;
 2bc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	data[0] = ADCH;
 2c0:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	char dataChar[10];
	itoa(((uint16_t)data[0] << 8|data[1]), dataChar, 10);
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	4a e0       	ldi	r20, 0x0A	; 10
 2c8:	be 01       	movw	r22, r28
 2ca:	6f 5f       	subi	r22, 0xFF	; 255
 2cc:	7f 4f       	sbci	r23, 0xFF	; 255
 2ce:	92 2b       	or	r25, r18
 2d0:	0e 94 9c 01 	call	0x338	; 0x338 <__itoa_ncheck>
	USART_send(dataChar[0]);
 2d4:	89 81       	ldd	r24, Y+1	; 0x01
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 4c 00 	call	0x98	; 0x98 <USART_send>
	USART_send(dataChar[1]);
 2dc:	8a 81       	ldd	r24, Y+2	; 0x02
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 4c 00 	call	0x98	; 0x98 <USART_send>
	USART_send(dataChar[2]);
 2e4:	8b 81       	ldd	r24, Y+3	; 0x03
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 4c 00 	call	0x98	; 0x98 <USART_send>
	USART_send(dataChar[3]);
 2ec:	8c 81       	ldd	r24, Y+4	; 0x04
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 4c 00 	call	0x98	; 0x98 <USART_send>
}
 2f4:	2a 96       	adiw	r28, 0x0a	; 10
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	f8 94       	cli
 2fa:	de bf       	out	0x3e, r29	; 62
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	cd bf       	out	0x3d, r28	; 61
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <main>:


int main(void)
{
	USART_init();
 306:	0e 94 40 00 	call	0x80	; 0x80 <USART_init>
	//DHT22 INITIAL SETTINGS
  DDRD &= ~(1<<PIN);
 30a:	57 98       	cbi	0x0a, 7	; 10
  PORTD |= (1<<PIN);
 30c:	5f 9a       	sbi	0x0b, 7	; 11
  //YL69 INITIAL SETTINGS
  PRR = (0<<PRADC);
 30e:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
  ADCSRA = (1<<ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) ;
 312:	87 e8       	ldi	r24, 0x87	; 135
 314:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  ADMUX = (1 << REFS0);
 318:	80 e4       	ldi	r24, 0x40	; 64
 31a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    while (1) 
    {
		unsigned char signal = USART_receive();
 31e:	0e 94 54 00 	call	0xa8	; 0xa8 <USART_receive>
		switch(signal){
 322:	81 36       	cpi	r24, 0x61	; 97
 324:	19 f0       	breq	.+6      	; 0x32c <main+0x26>
 326:	83 37       	cpi	r24, 0x73	; 115
 328:	21 f0       	breq	.+8      	; 0x332 <main+0x2c>
 32a:	f9 cf       	rjmp	.-14     	; 0x31e <main+0x18>
			case 'a': 
				readDHT();
 32c:	0e 94 5c 00 	call	0xb8	; 0xb8 <readDHT>
				break;
 330:	f6 cf       	rjmp	.-20     	; 0x31e <main+0x18>
			case 's':
				readYL();
 332:	0e 94 4c 01 	call	0x298	; 0x298 <readYL>
				break;
 336:	f3 cf       	rjmp	.-26     	; 0x31e <main+0x18>

00000338 <__itoa_ncheck>:
 338:	bb 27       	eor	r27, r27
 33a:	4a 30       	cpi	r20, 0x0A	; 10
 33c:	31 f4       	brne	.+12     	; 0x34a <__itoa_ncheck+0x12>
 33e:	99 23       	and	r25, r25
 340:	22 f4       	brpl	.+8      	; 0x34a <__itoa_ncheck+0x12>
 342:	bd e2       	ldi	r27, 0x2D	; 45
 344:	90 95       	com	r25
 346:	81 95       	neg	r24
 348:	9f 4f       	sbci	r25, 0xFF	; 255
 34a:	0c 94 a8 01 	jmp	0x350	; 0x350 <__utoa_common>

0000034e <__utoa_ncheck>:
 34e:	bb 27       	eor	r27, r27

00000350 <__utoa_common>:
 350:	fb 01       	movw	r30, r22
 352:	55 27       	eor	r21, r21
 354:	aa 27       	eor	r26, r26
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	aa 1f       	adc	r26, r26
 35c:	a4 17       	cp	r26, r20
 35e:	10 f0       	brcs	.+4      	; 0x364 <__utoa_common+0x14>
 360:	a4 1b       	sub	r26, r20
 362:	83 95       	inc	r24
 364:	50 51       	subi	r21, 0x10	; 16
 366:	b9 f7       	brne	.-18     	; 0x356 <__utoa_common+0x6>
 368:	a0 5d       	subi	r26, 0xD0	; 208
 36a:	aa 33       	cpi	r26, 0x3A	; 58
 36c:	08 f0       	brcs	.+2      	; 0x370 <__utoa_common+0x20>
 36e:	a9 5d       	subi	r26, 0xD9	; 217
 370:	a1 93       	st	Z+, r26
 372:	00 97       	sbiw	r24, 0x00	; 0
 374:	79 f7       	brne	.-34     	; 0x354 <__utoa_common+0x4>
 376:	b1 11       	cpse	r27, r1
 378:	b1 93       	st	Z+, r27
 37a:	11 92       	st	Z+, r1
 37c:	cb 01       	movw	r24, r22
 37e:	0c 94 c1 01 	jmp	0x382	; 0x382 <strrev>

00000382 <strrev>:
 382:	dc 01       	movw	r26, r24
 384:	fc 01       	movw	r30, r24
 386:	67 2f       	mov	r22, r23
 388:	71 91       	ld	r23, Z+
 38a:	77 23       	and	r23, r23
 38c:	e1 f7       	brne	.-8      	; 0x386 <strrev+0x4>
 38e:	32 97       	sbiw	r30, 0x02	; 2
 390:	04 c0       	rjmp	.+8      	; 0x39a <strrev+0x18>
 392:	7c 91       	ld	r23, X
 394:	6d 93       	st	X+, r22
 396:	70 83       	st	Z, r23
 398:	62 91       	ld	r22, -Z
 39a:	ae 17       	cp	r26, r30
 39c:	bf 07       	cpc	r27, r31
 39e:	c8 f3       	brcs	.-14     	; 0x392 <strrev+0x10>
 3a0:	08 95       	ret

000003a2 <_exit>:
 3a2:	f8 94       	cli

000003a4 <__stop_program>:
 3a4:	ff cf       	rjmp	.-2      	; 0x3a4 <__stop_program>
