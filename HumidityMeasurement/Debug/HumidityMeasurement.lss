
HumidityMeasurement.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ab2  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000772  00000000  00000000  00000d42  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003bb  00000000  00000000  000014b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001870  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003eb  00000000  00000000  000018b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f8  00000000  00000000  00001c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001d97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  78:	0c 94 cc 00 	jmp	0x198	; 0x198 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <USART_init>:
#include <stdlib.h>



void USART_init() {
	UBRR0H = 0;
  80:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = 0b001100111;
  84:	87 e6       	ldi	r24, 0x67	; 103
  86:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
  8a:	88 e1       	ldi	r24, 0x18	; 24
  8c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);
  90:	8e e0       	ldi	r24, 0x0E	; 14
  92:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  96:	08 95       	ret

00000098 <USART_send>:
}

void USART_send(unsigned char data){
	while(!(UCSR0A & (1<<UDRE0)));
  98:	e0 ec       	ldi	r30, 0xC0	; 192
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	90 81       	ld	r25, Z
  9e:	95 ff       	sbrs	r25, 5
  a0:	fd cf       	rjmp	.-6      	; 0x9c <USART_send+0x4>
	UDR0 = data;
  a2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  a6:	08 95       	ret

000000a8 <main>:
}

int main(void)
{
	USART_init();
  a8:	0e 94 40 00 	call	0x80	; 0x80 <USART_init>
	DDRD |= (1<<PORTD7);
  ac:	57 9a       	sbi	0x0a, 7	; 10
	PORTD |= (1<<PORTD7);
  ae:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	08 e0       	ldi	r16, 0x08	; 8
  b2:	10 e0       	ldi	r17, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	87 ea       	ldi	r24, 0xA7	; 167
  b8:	91 e6       	ldi	r25, 0x61	; 97
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x12>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x1c>
  c4:	00 00       	nop
		retries = i =j =0;
		uint8_t timeout = 0;
		_delay_ms(2000);
		
		//START READING	
		PORTD |= (1<<PORTD7);
  c6:	5f 9a       	sbi	0x0b, 7	; 11
  c8:	ef ef       	ldi	r30, 0xFF	; 255
  ca:	f4 e3       	ldi	r31, 0x34	; 52
  cc:	2c e0       	ldi	r18, 0x0C	; 12
  ce:	e1 50       	subi	r30, 0x01	; 1
  d0:	f0 40       	sbci	r31, 0x00	; 0
  d2:	20 40       	sbci	r18, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x26>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x30>
  d8:	00 00       	nop
		_delay_ms(250);
		
		//SET LOW FOR 20 ms
		DDRD &= ~(1<<PORTD7);
  da:	57 98       	cbi	0x0a, 7	; 10
		PORTD &= ~(1<<PORTD7);
  dc:	5f 98       	cbi	0x0b, 7	; 11
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	99 ef       	ldi	r25, 0xF9	; 249
  e2:	e0 e0       	ldi	r30, 0x00	; 0
  e4:	81 50       	subi	r24, 0x01	; 1
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e0 40       	sbci	r30, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x3c>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x46>
  ee:	00 00       	nop
		_delay_ms(20);
		
		//TURN OFF INTERRUPTIONS (CRITICAL PHASE)
		cli();
  f0:	f8 94       	cli
		
		//END START SIGNAL
		PORTD |= (1<<PORTD7);
  f2:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	f5 ed       	ldi	r31, 0xD5	; 213
  f6:	fa 95       	dec	r31
  f8:	f1 f7       	brne	.-4      	; 0xf6 <main+0x4e>
  fa:	00 00       	nop
		_delay_us(40);
		
		//START TO READ
		DDRD |= (1<<PORTD7);
  fc:	57 9a       	sbi	0x0a, 7	; 10
		PORTD |= (1<<PORTD7);
  fe:	5f 9a       	sbi	0x0b, 7	; 11
 100:	25 e3       	ldi	r18, 0x35	; 53
 102:	2a 95       	dec	r18
 104:	f1 f7       	brne	.-4      	; 0x102 <main+0x5a>
 106:	00 00       	nop
 108:	8f e3       	ldi	r24, 0x3F	; 63
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <main+0x64>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x6a>
 112:	00 00       	nop
 114:	ef e3       	ldi	r30, 0x3F	; 63
 116:	f1 e0       	ldi	r31, 0x01	; 1
 118:	31 97       	sbiw	r30, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <main+0x70>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x76>
 11e:	00 00       	nop
 120:	20 2f       	mov	r18, r16
 122:	31 2f       	mov	r19, r17
		//while((PORTD & (1<<PORTD7)));
		_delay_us(80);
		
		//READ BYTES
		for(int i = 0; i < 8; i++){
			tempL = tempL | (PORTD & (1<<PORTD7));
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	80 78       	andi	r24, 0x80	; 128
 128:	d8 2b       	or	r29, r24
 12a:	87 ec       	ldi	r24, 0xC7	; 199
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <main+0x86>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x8c>
 134:	00 00       	nop
 136:	21 50       	subi	r18, 0x01	; 1
 138:	31 09       	sbc	r19, r1
		//WAIT 80 us OF HIGH LEVEL
		//while((PORTD & (1<<PORTD7)));
		_delay_us(80);
		
		//READ BYTES
		for(int i = 0; i < 8; i++){
 13a:	a1 f7       	brne	.-24     	; 0x124 <main+0x7c>
 13c:	20 2f       	mov	r18, r16
 13e:	31 2f       	mov	r19, r17
			tempL = tempL | (PORTD & (1<<PORTD7));
			_delay_us(50);
		}
		for(int i = 0; i < 8; i++){
			tempH = tempH | (PORTD & (1<<PORTD7));
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	80 78       	andi	r24, 0x80	; 128
 144:	c8 2b       	or	r28, r24
 146:	e7 ec       	ldi	r30, 0xC7	; 199
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	31 97       	sbiw	r30, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <main+0xa2>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0xa8>
 150:	00 00       	nop
 152:	21 50       	subi	r18, 0x01	; 1
 154:	31 09       	sbc	r19, r1
		//READ BYTES
		for(int i = 0; i < 8; i++){
			tempL = tempL | (PORTD & (1<<PORTD7));
			_delay_us(50);
		}
		for(int i = 0; i < 8; i++){
 156:	a1 f7       	brne	.-24     	; 0x140 <main+0x98>
 158:	80 2f       	mov	r24, r16
 15a:	91 2f       	mov	r25, r17
			tempH = tempH | (PORTD & (1<<PORTD7));
			_delay_us(50);
		}
		for(int i = 0; i < 8; i++){
			humidityL = humidityL | (PORTD & (1<<PORTD7));
 15c:	2b b1       	in	r18, 0x0b	; 11
 15e:	e7 ec       	ldi	r30, 0xC7	; 199
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <main+0xba>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0xc0>
 168:	00 00       	nop
 16a:	01 97       	sbiw	r24, 0x01	; 1
		}
		for(int i = 0; i < 8; i++){
			tempH = tempH | (PORTD & (1<<PORTD7));
			_delay_us(50);
		}
		for(int i = 0; i < 8; i++){
 16c:	b9 f7       	brne	.-18     	; 0x15c <main+0xb4>
 16e:	80 2f       	mov	r24, r16
 170:	91 2f       	mov	r25, r17
			humidityL = humidityL | (PORTD & (1<<PORTD7));
			_delay_us(50);
		}
		for(int i = 0; i < 8; i++){
			humidityH = humidityH | (PORTD & (1<<PORTD7));
 172:	2b b1       	in	r18, 0x0b	; 11
 174:	e7 ec       	ldi	r30, 0xC7	; 199
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0xd0>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0xd6>
 17e:	00 00       	nop
 180:	01 97       	sbiw	r24, 0x01	; 1
		}
		for(int i = 0; i < 8; i++){
			humidityL = humidityL | (PORTD & (1<<PORTD7));
			_delay_us(50);
		}
		for(int i = 0; i < 8; i++){
 182:	b9 f7       	brne	.-18     	; 0x172 <main+0xca>
			humidityH = humidityH | (PORTD & (1<<PORTD7));
			_delay_us(50);
		}
		
		//ENABLE INTERRUPTIONS (END OF CRITICAL PHASE)
		sei();
 184:	78 94       	sei
		
		USART_send(tempH+48);
 186:	80 e3       	ldi	r24, 0x30	; 48
 188:	8c 0f       	add	r24, r28
 18a:	0e 94 4c 00 	call	0x98	; 0x98 <USART_send>
		USART_send(tempL+48);
 18e:	80 e3       	ldi	r24, 0x30	; 48
 190:	8d 0f       	add	r24, r29
 192:	0e 94 4c 00 	call	0x98	; 0x98 <USART_send>
				
    }
 196:	8e cf       	rjmp	.-228    	; 0xb4 <main+0xc>

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
